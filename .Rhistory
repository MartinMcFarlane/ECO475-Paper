fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
if (!require("quantmod")) install.packages("quantmod")
if (!require("xts")) install.packages("xts")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tseries")) install.packages("tseries")
if (!require("urca")) install.packages("urca") # Johansen cointegration test
if (!require("tsDyn")) install.packages("tsDyn")
if (!require("timetk")) install.packages("timetk")
if (!require("torch")) install.packages("torch")
if (!require("dplyr")) install.packages("dplyr")
library(quantmod); library(xts); library(ggplot2); library(ggpubr); library(tseries)
library(urca); library(tsDyn); library(timetk); library(torch); library(dplyr)
## STEP 1: Read and convert data
setwd("G:/My Drive/_ECO374/GPS2")
# import data file: Get GDP, unemployment, target rate, CPI
df <- read.csv('Macro_data_can.csv')
df$Index <- as.Date(df$Index, format="%Y-%m-%d")
# adjust date range to 2012-01-01 to present
df.xts <- as.xts(df)
df.xts <- window(df.xts, start = "2012-01-01")
vnames <- names(df.xts)
## STEP 2: Use Johansen test to find number of r cointegrating links
cointegration <- ca.jo(df.xts, type="trace", ecdet="trend", spec="transitory")
sc <- summary(cointegration)
sc
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(df.xts) # replace dat with df.xts
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
help("TVAR")
sessionInfo()
library(tsDyn)
package_version(tsDyn)
packageVersion(tsDyn)
packageVersion('tsDyn')
install.packages('tsDyn')
install.packages("tsDyn")
if (!require("quantmod")) install.packages("quantmod")
if (!require("xts")) install.packages("xts")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tseries")) install.packages("tseries")
if (!require("urca")) install.packages("urca") # Johansen cointegration test
if (!require("tsDyn")) install.packages("tsDyn")
if (!require("timetk")) install.packages("timetk")
if (!require("torch")) install.packages("torch")
if (!require("dplyr")) install.packages("dplyr")
library(quantmod); library(xts); library(ggplot2); library(ggpubr); library(tseries)
library(urca); library(tsDyn); library(timetk); library(torch); library(dplyr)
## STEP 1: Read and convert data
setwd("G:/My Drive/_ECO374/GPS2")
# import data file: Get GDP, unemployment, target rate, CPI
df <- read.csv('Macro_data_can.csv')
df$Index <- as.Date(df$Index, format="%Y-%m-%d")
# adjust date range to 2012-01-01 to present
df.xts <- as.xts(df)
df.xts <- window(df.xts, start = "2012-01-01")
vnames <- names(df.xts)
## STEP 2: Use Johansen test to find number of r cointegrating links
cointegration <- ca.jo(df.xts, type="trace", ecdet="trend", spec="transitory")
sc <- summary(cointegration)
sc
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(df.xts) # replace dat with df.xts
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 1: Read and convert data
setwd("G:/My Drive/_ECO374/GPS2")
# import data file: Get GDP, unemployment, target rate, CPI
df <- read.csv('Macro_data_can.csv')
df$Index <- as.Date(df$Index, format="%Y-%m-%d")
# adjust date range to 2012-01-01 to present
df.xts <- as.xts(df)
df.xts <- window(df.xts, start = "2012-01-01")
vnames <- names(df.xts)
## STEP 2: Use Johansen test to find number of r cointegrating links
cointegration <- ca.jo(df.xts, type="trace", ecdet="trend", spec="transitory")
sc <- summary(cointegration)
sc
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(df.xts)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
help("TVAR")
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(df.xts)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F, gamma=1)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(df.xts)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=df.xts[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=df.xts[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
dat <- as.matrix(na.omit(diff(df.xts)))
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(dat)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=dat[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=dat[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=dat[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (dat[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
dat <- as.matrix(na.omit(diff(df.xts)))
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(dat)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=dat[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=dat[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=dat[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (dat[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
if (!require("quantmod")) install.packages("quantmod")
if (!require("xts")) install.packages("xts")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tseries")) install.packages("tseries")
if (!require("urca")) install.packages("urca") # Johansen cointegration test
if (!require("tsDyn")) install.packages("tsDyn")
if (!require("timetk")) install.packages("timetk")
if (!require("torch")) install.packages("torch")
if (!require("dplyr")) install.packages("dplyr")
library(quantmod); library(xts); library(ggplot2); library(ggpubr); library(tseries)
library(urca); library(tsDyn); library(timetk); library(torch); library(dplyr)
## STEP 1: Read and convert data
setwd("G:/My Drive/_ECO374/GPS2")
# import data file: Get GDP, unemployment, target rate, CPI
df <- read.csv('Macro_data_can.csv')
df$Index <- as.Date(df$Index, format="%Y-%m-%d")
# adjust date range to 2012-01-01 to present
df.xts <- as.xts(df)
df.xts <- window(df.xts, start = "2012-01-01")
vnames <- names(df.xts)
## STEP 2: Use Johansen test to find number of r cointegrating links
cointegration <- ca.jo(df.xts, type="trace", ecdet="trend", spec="transitory")
sc <- summary(cointegration)
sc
View(MSE.t)
View(MSE)
View(MSE.t)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('tinytex')
tinytex::tlmgr_update()
tinytex::install_tinytex()
if (!require("quantmod")) install.packages("quantmod")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("rugarch")) install.packages("rugarch")
if (!require("rmgarch")) install.packages("rmgarch")
if (!require("timetk")) install.packages("timetk")
if (!require("xts")) install.packages("xts")
if (!require("forecast")) install.packages("forecast")
library(quantmod) # functions: getSymbols
library(ggplot2)  # functions: ggplot
library(rugarch)  # functions: ugarchspec
library(rmgarch)  # functions: dccspec, dccfit, dccforecast
library(timetk)   # functions: tk_index, tk_make_future_timeseries
library(xts)      # functions: xts
library(forecast) # functions: auto.arima
# STEP 1: Read Nasdaq data as xts, from Jan 2010
IXIC <- getSymbols("^IXIC", src="yahoo", return.class="xts", from="2010-01-01", auto.assign=F)
NASDAQ <- IXIC$IXIC.Close
colnames(NASDAQ) <- "ND"
NASDAQ_r <- na.omit(diff(log(NASDAQ)))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
# STEP 3: Forecast VaR at 1% for $50,000 position over next 8 days
# Forecast setup
n.future <- 8
model_forecast <- ugarchforecast(fit=model_fit, n.ahead=n.future)
id <- tk_index(NASDAQ_r)
id.f <- tk_make_future_timeseries(id, length_out=n.future, inspect_weekdays=TRUE)
f_mean <- as.numeric(model_forecast@forecast$seriesFor)
f_std <- as.numeric(model_forecast@forecast$sigmaFor)
VaR_f <- 50000*abs(f_mean-2.33*f_std)
VaR_f <- xts(VaR_f, order.by=id.f)
colnames(VaR_f) <- "VaR"
ggplot(data=VaR_f, aes(x=index(VaR_f), y=VaR)) +
geom_line(color="deeppink4") +
geom_point(color="deeppink4") +
labs(x="Date", y="", title="Forecast of Value at Risk for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $1,000,000 position in S&P500") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
View(model_forecast)
if (!require("quantmod")) install.packages("quantmod")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("rugarch")) install.packages("rugarch")
if (!require("rmgarch")) install.packages("rmgarch")
if (!require("timetk")) install.packages("timetk")
if (!require("xts")) install.packages("xts")
if (!require("forecast")) install.packages("forecast")
library(quantmod) # functions: getSymbols
library(ggplot2)  # functions: ggplot
library(rugarch)  # functions: ugarchspec
library(rmgarch)  # functions: dccspec, dccfit, dccforecast
library(timetk)   # functions: tk_index, tk_make_future_timeseries
library(xts)      # functions: xts
library(forecast) # functions: auto.arima
# STEP 1: Read Nasdaq data as xts, from Jan 2010
IXIC <- getSymbols("^IXIC", src="yahoo", return.class="xts", from="2010-01-01", auto.assign=F)
NASDAQ <- IXIC$IXIC.Close
colnames(NASDAQ) <- "ND"
NASDAQ_r <- na.omit(diff(log(NASDAQ)))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
# STEP 3: Forecast VaR at 1% for $50,000 position over next 8 days
# Forecast setup
n.future <- 8
model_forecast <- ugarchforecast(fit=model_fit, n.ahead=n.future)
id <- tk_index(NASDAQ_r)
id.f <- tk_make_future_timeseries(id, length_out=n.future, inspect_weekdays=TRUE)
f_mean <- as.numeric(model_forecast@forecast$seriesFor)
f_std <- as.numeric(model_forecast@forecast$sigmaFor)
VaR_f <- 50000*abs(f_mean-2.33*f_std)
VaR_f <- xts(VaR_f, order.by=id.f)
colnames(VaR_f) <- "VaR"
ggplot(data=VaR_f, aes(x=index(VaR_f), y=VaR)) +
geom_line(color="deeppink4") +
geom_point(color="deeppink4") +
labs(x="Date", y="", title="Forecast of Value at Risk for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
model
cd
cd()
wd
setwd()
help(setwd)
setwd(fpath)
# Setup
fpath <- "C:\Users\marti\Documents\GitHub\ECO475-Paper"
# Setup
fpath <- "C:/Users/marti/Documents/GitHub/ECO475-Paper"
getwd()
fpath
setwd(fpath)
getwd()
setwd(fpath)
help(root.dir)
help(knitr root.dir)
getwd()
