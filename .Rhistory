fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (df.xts[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
dat <- as.matrix(na.omit(diff(df.xts)))
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(dat)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=dat[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=dat[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=dat[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (dat[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
## STEP 3: Time series validation, 1 to 3 lags; VAR, VEC, and
#  TVAR (one threshold) models
dat <- as.matrix(na.omit(diff(df.xts)))
for (lag in 1:3) {
print("lag:")
print(lag)
for (m in 1:3) {
TT <- nrow(dat)
T1 <- floor(0.5*TT) # start at 50% of the sample size
step <- 12 # forecast data horizon for MSE
tseq <- seq(from=T1, to=TT, by=step)
tseq <- tseq[-length(tseq)]
MSE.t <- matrix(0,nrow=tseq[length(tseq)]+step-T1,ncol=length(vnames)) # initialize
colnames(MSE.t) <- vnames
for (j in tseq) {
# VAR model
if (m==1) {model <- lineVar(data=dat[1:j-1,], lag=lag, model="VAR", I="diff")
fcst <- predict(model, n.ahead=step)}
# TVAR model
if (m==2) {model <- TVAR(data=dat[1:j-1,], lag=lag, model="TAR", nthresh=1, trace=F)
fcst <- predict(model, n.ahead=step)}
# VEC model
if (m==3) {model <- lineVar(data=dat[1:j-1,], lag=lag, r=2, model="VEC")
fcst <- predict(model, n.ahead=step)}
#Note: TVEC model is not implemented in R for more than 2 variables
js <- j+step-1
MSE.t[(j-T1+1):(js-T1+1),] <- (dat[j:js,]-fcst)^2
}
if (m==1) print("VAR")
if (m==2) print("TVAR")
if (m==3) print("VEC")
MSE <- matrix(colMeans(MSE.t), nrow=1)
colnames(MSE) <- vnames
print(MSE)
print(" ")
}
}
if (!require("quantmod")) install.packages("quantmod")
if (!require("xts")) install.packages("xts")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tseries")) install.packages("tseries")
if (!require("urca")) install.packages("urca") # Johansen cointegration test
if (!require("tsDyn")) install.packages("tsDyn")
if (!require("timetk")) install.packages("timetk")
if (!require("torch")) install.packages("torch")
if (!require("dplyr")) install.packages("dplyr")
library(quantmod); library(xts); library(ggplot2); library(ggpubr); library(tseries)
library(urca); library(tsDyn); library(timetk); library(torch); library(dplyr)
## STEP 1: Read and convert data
setwd("G:/My Drive/_ECO374/GPS2")
# import data file: Get GDP, unemployment, target rate, CPI
df <- read.csv('Macro_data_can.csv')
df$Index <- as.Date(df$Index, format="%Y-%m-%d")
# adjust date range to 2012-01-01 to present
df.xts <- as.xts(df)
df.xts <- window(df.xts, start = "2012-01-01")
vnames <- names(df.xts)
## STEP 2: Use Johansen test to find number of r cointegrating links
cointegration <- ca.jo(df.xts, type="trace", ecdet="trend", spec="transitory")
sc <- summary(cointegration)
sc
View(MSE.t)
View(MSE)
View(MSE.t)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('tinytex')
tinytex::tlmgr_update()
tinytex::install_tinytex()
if (!require("quantmod")) install.packages("quantmod")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("rugarch")) install.packages("rugarch")
if (!require("rmgarch")) install.packages("rmgarch")
if (!require("timetk")) install.packages("timetk")
if (!require("xts")) install.packages("xts")
if (!require("forecast")) install.packages("forecast")
library(quantmod) # functions: getSymbols
library(ggplot2)  # functions: ggplot
library(rugarch)  # functions: ugarchspec
library(rmgarch)  # functions: dccspec, dccfit, dccforecast
library(timetk)   # functions: tk_index, tk_make_future_timeseries
library(xts)      # functions: xts
library(forecast) # functions: auto.arima
# STEP 1: Read Nasdaq data as xts, from Jan 2010
IXIC <- getSymbols("^IXIC", src="yahoo", return.class="xts", from="2010-01-01", auto.assign=F)
NASDAQ <- IXIC$IXIC.Close
colnames(NASDAQ) <- "ND"
NASDAQ_r <- na.omit(diff(log(NASDAQ)))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
# STEP 3: Forecast VaR at 1% for $50,000 position over next 8 days
# Forecast setup
n.future <- 8
model_forecast <- ugarchforecast(fit=model_fit, n.ahead=n.future)
id <- tk_index(NASDAQ_r)
id.f <- tk_make_future_timeseries(id, length_out=n.future, inspect_weekdays=TRUE)
f_mean <- as.numeric(model_forecast@forecast$seriesFor)
f_std <- as.numeric(model_forecast@forecast$sigmaFor)
VaR_f <- 50000*abs(f_mean-2.33*f_std)
VaR_f <- xts(VaR_f, order.by=id.f)
colnames(VaR_f) <- "VaR"
ggplot(data=VaR_f, aes(x=index(VaR_f), y=VaR)) +
geom_line(color="deeppink4") +
geom_point(color="deeppink4") +
labs(x="Date", y="", title="Forecast of Value at Risk for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $1,000,000 position in S&P500") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
View(model_forecast)
if (!require("quantmod")) install.packages("quantmod")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("rugarch")) install.packages("rugarch")
if (!require("rmgarch")) install.packages("rmgarch")
if (!require("timetk")) install.packages("timetk")
if (!require("xts")) install.packages("xts")
if (!require("forecast")) install.packages("forecast")
library(quantmod) # functions: getSymbols
library(ggplot2)  # functions: ggplot
library(rugarch)  # functions: ugarchspec
library(rmgarch)  # functions: dccspec, dccfit, dccforecast
library(timetk)   # functions: tk_index, tk_make_future_timeseries
library(xts)      # functions: xts
library(forecast) # functions: auto.arima
# STEP 1: Read Nasdaq data as xts, from Jan 2010
IXIC <- getSymbols("^IXIC", src="yahoo", return.class="xts", from="2010-01-01", auto.assign=F)
NASDAQ <- IXIC$IXIC.Close
colnames(NASDAQ) <- "ND"
NASDAQ_r <- na.omit(diff(log(NASDAQ)))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
# STEP 3: Forecast VaR at 1% for $50,000 position over next 8 days
# Forecast setup
n.future <- 8
model_forecast <- ugarchforecast(fit=model_fit, n.ahead=n.future)
id <- tk_index(NASDAQ_r)
id.f <- tk_make_future_timeseries(id, length_out=n.future, inspect_weekdays=TRUE)
f_mean <- as.numeric(model_forecast@forecast$seriesFor)
f_std <- as.numeric(model_forecast@forecast$sigmaFor)
VaR_f <- 50000*abs(f_mean-2.33*f_std)
VaR_f <- xts(VaR_f, order.by=id.f)
colnames(VaR_f) <- "VaR"
ggplot(data=VaR_f, aes(x=index(VaR_f), y=VaR)) +
geom_line(color="deeppink4") +
geom_point(color="deeppink4") +
labs(x="Date", y="", title="Forecast of Value at Risk for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 4: Forecast Expected shortfall of same position, alpha, timeframe of step 3
ES <- 50000*abs(f_mean-2.64*f_std)
ES <- xts(ES, order.by=id.f)
colnames(ES) <- "es"
ggplot(data=ES, aes(x=index(ES), y=es)) +
geom_line(color="springgreen4") +
geom_point(color="springgreen4") +
labs(x="Date", y="", title="Expected Shortfall for a $50,000 position in NASDAQ") +
theme_minimal() + scale_x_date(date_breaks="1 day", date_labels = "%b %d") +
theme(plot.title = element_text(size=10))
# STEP 2: Fit ARMA(1,1)-GARCH(1,1) model to data
model <- ugarchspec(variance.model = list(model="sGARCH", garchOrder=c(1, 1)),
mean.model = list(armaOrder=c(1, 1))) # specify model
model_fit <- ugarchfit(spec=model, data=NASDAQ_r) # fit model
model
cd
cd()
wd
setwd()
help(setwd)
setwd(fpath)
# Setup
fpath <- "C:\Users\marti\Documents\GitHub\ECO475-Paper"
# Setup
fpath <- "C:/Users/marti/Documents/GitHub/ECO475-Paper"
getwd()
fpath
setwd(fpath)
getwd()
setwd(fpath)
help(root.dir)
help(knitr root.dir)
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
start_date <- "1990-01-01"
end_date <- "2010-10-01" # for windowing datasets
# Load primary dataset - Average airfares
airfare <- read.csv("Data/av_airfare.csv")
cols <- c("REF_DATE", "GEO", "VALUE")
airfare <- airfare[,cols] # remove all columns except cols
names(airfare) <- c("REF_DATE", "City", "Airfare")
airfare$Airfare <- as.numeric(airfare$Airfare)
airfare$REF_DATE <- paste(airfare$REF_DATE,"-01",sep="")
airfare$REF_DATE <- as.Date(airfare$REF_DATE)
airfare.xts <- as.xts(airfare)
airfare.xts <- window(airfare.xts, start=start_date, end=end_date)
# drop Canada datapoints
airfare.wo.ca <- airfare.xts[airfare.xts$City != "Canada",]
# summary statistics
summary(airfare.wo.ca$Airfare)
print(c("Std Dev.: ", as.character(sd(airfare.wo.ca$Airfare))))
# create collection of airports of interest
View(airfare)
str(airfare.wo.ca$Airfare)
# Load primary dataset - Average airfares
airfare <- read.csv("Data/av_airfare.csv")
cols <- c("REF_DATE", "GEO", "VALUE")
airfare <- airfare[,cols] # remove all columns except cols
names(airfare) <- c("REF_DATE", "City", "Airfare")
airfare$Airfare <- as.numeric(airfare$Airfare)
airfare$REF_DATE <- paste(airfare$REF_DATE,"-01",sep="")
airfare$REF_DATE <- as.Date(airfare$REF_DATE)
airfare.xts <- as.xts(airfare)
airfare.xts <- window(airfare.xts, start=start_date, end=end_date)
# drop Canada datapoints
airfare.wo.ca <- airfare.xts[airfare.xts$City != "Canada",]
# summary statistics
summary(airfare.wo.ca$Airfare)
print(c("Std Dev.: ", as.character(sd(airfare.wo.ca$Airfare))))
# create collection of airports of interest
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
start_date <- "1990-01-01"
end_date <- "2010-10-01" # for windowing datasets
# Load primary dataset - Average airfares
airfare <- read.csv("Data/av_airfare.csv")
cols <- c("REF_DATE", "GEO", "VALUE")
airfare <- airfare[,cols] # remove all columns except cols
names(airfare) <- c("REF_DATE", "City", "Airfare")
airfare$REF_DATE <- paste(airfare$REF_DATE,"-01",sep="")
airfare$REF_DATE <- as.Date(airfare$REF_DATE)
airfare.xts <- as.xts(airfare)
airfare.xts <- window(airfare.xts, start=start_date, end=end_date)
airfare.xts$Airfare <- as.numeric(airfare.xts$Airfare)
# drop Canada datapoints
airfare.wo.ca <- airfare.xts[airfare.xts$City != "Canada",]
# summary statistics
summary(airfare.wo.ca$Airfare)
print(c("Std Dev.: ", as.character(sd(airfare.wo.ca$Airfare))))
# create collection of airports of interest
View(airfare.xts)
View(airfare.xts)
View(airfare.wo.ca)
View(airfare.wo.ca)
str(airfare.wo.ca$Airfare)
airfare.wo.ca$Airfare <- as.numeric(airfare.wo.ca$Airfare)
str(airfare.wo.ca$Airfare)
airfare.wo.ca$Airfare <- as.double(airfare.wo.ca$Airfare)
str(airfare.wo.ca$Airfare)
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
# Load primary dataset - Average airfares CONVERT TO DATAFRAME AS XTS IS A MATRIX OBJ
housing <- read.csv("Data/housing_indicators_micro.csv")
View(housing)
names(housing)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("REF_DATE", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
help("reshape")
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("REF_DATE", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- reshape(housing, direction="wide", idvar="Indicator", timevar="Year")
View(housing.w)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("REF_DATE", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- reshape(housing, direction="wide", idvar="Indicator")
help(melt)
help(cast)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("REF_DATE", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- reshape(housing, direction="wide", idvar="GEO", timevar = "Indicator")
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("REF_DATE", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- reshape(housing, direction="wide", idvar=c("Year","GEO", "DGUID"),
timevar = c("Indicator", "Tenure"))
View(housing.raw)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
library(xts)
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("Census.year..2.", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
# housing.w <- reshape(housing, direction="wide", idvar=c("Year","GEO", "DGUID"),
#                     timevar = c("Indicator", "Tenure"))
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(reshape)
install.packages("reshape")
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(reshape)
help("cast")
help(melt)
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(reshape)
help("cast")
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("Census.year..2.", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- cast(housing[1:2000,], Year ~ GEO ~ DGUID, value="VALUE")
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(tidyr)
help(spread)
help("pivot_wider")
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("Census.year..2.", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- pivot_wider(housing[1:2000,], id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
View(housing.w)
help(replace_na)
names(housing.w)
# Load primary dataset
housing.raw <- read.csv("Data/housing_indicators_micro.csv")
cols <- c("Census.year..2.", "GEO", "DGUID", "Housing.indicators..9.",
"Tenure..4.", "VALUE") # cols to keep
housing <- housing.raw[,cols]
names(housing) <- c("Year", "GEO", "DGUID", "Indicator", "Tenure", "VALUE")
housing.w <- pivot_wider(housing[1:2000,], id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
# replace NAs with zeros
#housing.w %<% replace_na(list())
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
#housing.w %<% replace_na(list())
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
housing.w %<% replace_na(list(tot.hh=0, inadq.pc=0.0, unsuit.pc=0.0, unafford.pc=0.0,
core.nd=0, core.nd.pc=0.0, inadq=0, unsuit=0, unafford=0))
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(tidyr)
library(dplyr)
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
housing.w %<% replace_na(list(tot.hh=0, inadq.pc=0.0, unsuit.pc=0.0, unafford.pc=0.0,
core.nd=0, core.nd.pc=0.0, inadq=0, unsuit=0, unafford=0))
knitr::opts_chunk$set(echo = TRUE)
# Setup
#load packages
library(quantmod)
library(xts)
library(tidyr)
library(tidyverse)
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
housing.w %<% replace_na(list(tot.hh=0, inadq.pc=0.0, unsuit.pc=0.0, unafford.pc=0.0,
core.nd=0, core.nd.pc=0.0, inadq=0, unsuit=0, unafford=0))
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
housing.w %>% replace_na(list(tot.hh=0, inadq.pc=0.0, unsuit.pc=0.0, unafford.pc=0.0,
core.nd=0, core.nd.pc=0.0, inadq=0, unsuit=0, unafford=0))
housing.w <- pivot_wider(housing, id_cols=c("Year", "GEO", "DGUID","Tenure"),
names_from="Indicator", values_from="VALUE")
cols <- c("Year", "GEO", "DGUID", "Tenure", "tot.hh", "inadq.pc", "unsuit.pc",
"unafford.pc", "core.nd", "core.nd.pc", "inadq", "unsuit", "unafford")
names(housing.w) <- cols
# replace NAs with zeros
housing.w <- housing.w %>% replace_na(list(tot.hh=0, inadq.pc=0.0, unsuit.pc=0.0, unafford.pc=0.0,
core.nd=0, core.nd.pc=0.0, inadq=0, unsuit=0, unafford=0))
